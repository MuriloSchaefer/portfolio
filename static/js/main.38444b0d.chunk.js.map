{"version":3,"sources":["reducers/portfolioReducer.js","providers/portfolioProvider.js","providers/windowDimensionsProvider.js","components/ResponsiveLayout/index.js","hooks/useWindowDimensions.js","components/Content/tabbedView.js","components/Content/mobileView.js","components/NavBar/index.js","components/Home/index.js","components/Content/desktopView.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["portfolioReducer","state","action","type","todoItems","Error","PortfolioProvider","React","createContext","Provider","WindowDimensionsContext","WindowDimensionsProvider","children","useState","width","window","innerWidth","height","innerHeight","dimensions","setDimensions","useEffect","handleResize","addEventListener","removeEventListener","value","ResponsiveLayout","breakpoint","renderMobile","renderDesktop","useContext","console","log","TabbedView","className","MobileView","NavBar","Home","DesktopView","Content","initialState","App","store","useReducer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.38444b0d.chunk.js","sourcesContent":["export const portfolioReducer = (state, action) => {\n    switch (action.type) {\n        case 'OPEN_REPOSITORY':\n            return {\n                ...state,\n                todoItems: [...state.todoItems, action.todoItems]\n            };\n        default:\n            throw new Error('Unexpected action');\n    }\n}","import React from 'react';\n\nexport const PortfolioContext = React.createContext({});\nexport const PortfolioProvider = PortfolioContext.Provider;","import React, { useEffect, useState, } from 'react'\n\nexport const WindowDimensionsContext = React.createContext(null);\nexport const WindowDimensionsProvider = ({children}) => {\n    const [dimensions, setDimensions] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    })\n\n    useEffect(()=> {\n        const handleResize = () => {\n            setDimensions({\n                width: window.innerWidth,\n                height: window.innerHeight\n            })\n        }\n        window.addEventListener('resize', handleResize)\n        return () => {window.removeEventListener('resize', handleResize)}\n    }, []);\n\n    return (\n        <WindowDimensionsContext.Provider value={dimensions}>\n            {children}\n        </WindowDimensionsContext.Provider>\n    )\n}","import { useWindowDimensions } from '../../hooks/useWindowDimensions'\n\nconst ResponsiveLayout = ({breakpoint, renderMobile, renderDesktop }) =>{\n   \n    const {width} = useWindowDimensions()\n    console.log(width, breakpoint)\n    return (width > breakpoint ? renderDesktop() : renderMobile())\n\n}\n\nexport default ResponsiveLayout","import {useContext} from 'react';\nimport { WindowDimensionsContext } from \"../providers/windowDimensionsProvider\";\n\nexport const useWindowDimensions = () => {\n    return useContext(WindowDimensionsContext);\n}","import React from 'react';\n\nconst TabbedView = (/* { variables  } */) => {\n\n    return (\n      <div className='tabs-container'>\n        {/* Add this to a NavBarcomponent\n        <nav className='tabs is-centered'>\n          <ul>\n            {items.map(({ title }, idx) => (\n              <li\n                className={idx === active ? 'is-active' : ''}\n                key={title}\n              >\n                <a onClick={() => setActive(idx)}>{title}</a>\n              </li>\n            ))}\n          </ul>\n        </nav> */}\n        <div>\n          {/* <p className='content'>\n            {items[active].content}\n          </p> */}\n        </div>\n      </div>\n    )\n  }\n\n  export default TabbedView","import React from 'react'\nimport TabbedView from './tabbedView'\n\nconst MobileView = (/* {  variables  } */) => (\n  <div className='container box'>\n    <TabbedView /* items={items} */ />\n  </div>\n)\n\nexport default MobileView","import React from 'react'\n\nconst NavBar = () => {\n    return (\n        <>\n        <ul>\n            <li>home</li>\n            <li>about</li>\n        </ul>\n        </>\n    )\n}\nexport default NavBar","import React from 'react';\n//import { usePortifolio } from \"../../hooks/usePortfolio\"\nimport NavBar from '../NavBar';\n\nconst Home = () => {\n    //const { /* variables */ } = usePortifolio();\n\n    return (\n        <NavBar />\n    )\n}\n\nexport default Home","import React from 'react'\nimport Home from '../Home'\n\nconst DesktopView = (/* { variables } */) => {\n  //const { width } = useWindowDimensions()\n  return (\n    <Home />\n  )\n}\nexport default DesktopView","import React from 'react'\nimport ResponsiveLayout from '../ResponsiveLayout'\nimport MobileView from './mobileView'\nimport DesktopView from './desktopView'\n\nconst Content = (/* { variables  } */) => (\n  <ResponsiveLayout\n    breakpoint={740}\n    renderDesktop={() => (\n      <DesktopView /* variables */ />\n    )}\n    renderMobile={() => (\n      <MobileView /* variable */ />\n    )}\n  />\n)\n\nexport default Content","import React, { useReducer } from 'react';\nimport { portfolioReducer } from './reducers/portfolioReducer';\nimport { PortfolioProvider } from './providers/portfolioProvider';\nimport { WindowDimensionsProvider } from './providers/windowDimensionsProvider';\nimport 'bulma/css/bulma.css'\nimport Content from './components/Content';\n\nconst initialState = {\n  // variables\n};\n\nconst App = () => {\n  const store = useReducer(portfolioReducer, initialState);\n  return (\n    <WindowDimensionsProvider>\n      <div className=\"App\">\n      <PortfolioProvider value={store}>\n        <Content /* variables */ />\n      </PortfolioProvider>\n      </div>\n    </WindowDimensionsProvider>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}