{"version":3,"sources":["reducers/portfolioReducer.js","providers/portfolioProvider.js","hooks/useCancellablePromises.js","hooks/usePortfolio.js","hooks/usePortfolioContext.js","components/portfolioHome.js","providers/windowDimensionsProvider.js","App.js","serviceWorker.js","index.js"],"names":["portfolioReducer","state","action","type","todoItems","Error","PortfolioContext","React","createContext","PortfolioProvider","Provider","makeCancelable","promise","isCanceled","Promise","resolve","reject","then","val","catch","error","cancel","usePortifolio","portfolioContext","useContext","dispatch","usePortfolioContext","cancelable","emptyPromise","undefined","promises","useRef","useEffect","current","forEach","p","cancellablePromise","cPromise","push","useCancellablePromise","PortfolioHome","WindowDimensionsContext","WindowDimensionsProvider","children","useState","width","window","innerWidth","height","innerHeight","dimensions","setDimensions","handleResize","addEventListener","removeEventListener","value","initialState","App","store","useReducer","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70615bcb.chunk.js","sourcesContent":["export const portfolioReducer = (state, action) => {\n    switch (action.type) {\n        case 'OPEN_REPOSITORY':\n            return {\n                ...state,\n                todoItems: [...state.todoItems, action.todoItems]\n            };\n        default:\n            throw new Error('Unexpected action');\n    }\n}","import React from 'react';\n\nexport const PortfolioContext = React.createContext({});\nexport const PortfolioProvider = PortfolioContext.Provider;","import { useRef, useEffect } from 'react';\n\nexport const makeCancelable = (promise) => {\n  let isCanceled = false;\n\n  const wrappedPromise = new Promise((resolve, reject) => {\n    promise\n      .then(val => (isCanceled ? reject(new Error({ isCanceled })) : resolve(val)))\n      .catch(error => (isCanceled ? reject(new Error({ isCanceled })) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      isCanceled = true;\n    },\n  };\n}\n\nexport const useCancellablePromise = (cancelable = makeCancelable) => {\n  const emptyPromise = Promise.resolve(true);\n\n  // test if the input argument is a cancelable promise generator\n  if (cancelable(emptyPromise).cancel === undefined) {\n    throw new Error('promise wrapper argument must provide a cancel() function')\n  }\n\n  const promises = useRef();\n\n  useEffect(\n    () => {\n      promises.current = promises.current || [];\n      return () => {\n        promises.current.forEach(p => p.cancel());\n        promises.current = [];\n      };\n    }, []\n  );\n\n  const cancellablePromise = (p) =>  {\n    const cPromise = cancelable(p);\n    promises.current.push(cPromise);\n    return cPromise.promise;\n  };\n\n  return { cancellablePromise };\n}","import { useEffect } from 'react';\nimport { usePortfolioContext } from './usePortfolioContext';\nimport { useCancellablePromise } from './useCancellablePromises';\n\n\nexport const usePortifolio = () => {\n    const { state, dispatch } = usePortfolioContext();\n    const { cancellablePromise } = useCancellablePromise();\n\n    useEffect(() => {\n        // Effetcs when array changes\n    }, []);\n\n    return {\n        \n    }\n}","import { useContext } from 'react';\nimport { PortfolioContext } from '../providers/portfolioProvider';\n\nexport const usePortfolioContext = () => {\n    const portfolioContext = useContext(PortfolioContext);\n    return {\n        state: portfolioContext[0],\n        dispatch: portfolioContext[1],\n    }\n}","import React from 'react';\nimport { usePortifolio } from \"../hooks/usePortfolio\"\n\nconst PortfolioHome = () => {\n    const { /* variables */ } = usePortifolio();\n\n    return (\n        <>\n        {/* <Container>\n            <NavBar />\n        </Container> */}\n        </>\n    )\n}\n\nexport default PortfolioHome","import React, { useEffect, useState, } from 'react'\n\nexport const WindowDimensionsContext = React.createContext({});\nexport const WindowDimensionsProvider = ({children}) => {\n    const [dimensions, setDimensions] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight\n    })\n\n    useEffect(()=> {\n        const handleResize = () => {\n            setDimensions({\n                width: window.innerWidth,\n                height: window.innerHeight\n            })\n        }\n        window.addEventListener('resize', handleResize)\n        return () => {window.removeEventListener('resize', handleResize)}\n    }, []);\n\n    return (\n        <WindowDimensionsContext.Provider value={dimensions}>\n            {children}\n        </WindowDimensionsContext.Provider>\n    )\n}","import React, { useState, useReducer } from 'react';\nimport { portfolioReducer } from './reducers/portfolioReducer';\nimport { PortfolioProvider } from './providers/portfolioProvider';\nimport PortfolioHome from './components/portfolioHome';\nimport { WindowDimensionsProvider } from './providers/windowDimensionsProvider';\n\nconst initialState = {\n  // variables\n};\n\nconst App = () => {\n  const store = useReducer(portfolioReducer, initialState);\n  return (\n    <WindowDimensionsProvider>\n      <div className=\"App\">\n      <PortfolioProvider value={store}>\n        <PortfolioHome />\n      </PortfolioProvider>\n      </div>\n    </WindowDimensionsProvider>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}